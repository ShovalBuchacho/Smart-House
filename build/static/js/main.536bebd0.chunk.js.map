{"version":3,"sources":["Components/Header.js","Components/Main.js","ContextAPI.js","Components/Devise.js","Components/Room.js","Components/AddRoom.js","App.js","reportWebVitals.js","index.js"],"names":["Header","style","minHeight","Main","props","border","borderRadius","boxShadow","backgroundColor","rooms","map","element","i","to","name","className","textTransform","margin","type","context","React","createContext","Provider","Consumer","Devise","val","onClick","delDevice","index","setCondition","condition","devices","Room","useState","selectedDevise","setSelectedDevise","color","room","deviceName","htmlFor","onChange","target","value","id","length","alert","addDeviceFunction","dell","AddRoom","setName","setType","setColor","add","App","setRooms","setDevices","addDevice","device","display","flexDirection","textAlign","padding","roomName","roomType","roomColor","some","tempRoomsList","filter","newDevices","tempDevicesList","exact","path","component","devicesList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.536bebd0.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header() {\n  return (\n    <div style={{ minHeight: \"50px\" }}>\n      <h1>Smart House</h1>\n      {/* The Logo that will be in the top  constantly. */}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Main(props) {\n  return (\n    <div\n       \n        style={{\n          border: \"solid 1px #14274e\",\n          borderRadius: \"10px\",\n          boxShadow: \"20px 20px 50px\",\n          backgroundColor: \"#9ba4b4\",\n          \n        }}\n    >\n      <div>\n      \n      \n        {/* Open link for each room in the rooms array. */}\n        {props.rooms.map((element, i) => {\n          return (\n            <Link to={`/${element.name}`}>\n              <button\n                className=\"btn btn-success\"\n                style={{ textTransform: \"uppercase\", margin: \"10px 5px\" }}\n              >\n                {element.name}\n              </button>\n            </Link>\n          );\n        })}\n      </div>\n\n      <Link to=\"/AddRoom\">\n        <button\n          type=\"button\"\n          className=\"btn btn-success\"\n          style={{ textTransform: \"uppercase\" }}\n        >\n          add room\n        </button>\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst context = React.createContext();\n\nexport const Provider = context.Provider;\nexport const Consumer = context.Consumer;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Consumer } from \"../ContextAPI\";\n\nexport default function Devise(props) {\n  // Check condition of device and return tru or false depending on devices array in app.\n  const hidden = (condition) => {\n    // debugger;\n    if (props.index >= 0) {\n      return condition === false ? \"Off\" : \"On\";\n    } else return null;\n  };\n\n  return (\n    <div>\n      <Consumer>\n        {(val) => {\n          // debugger;\n          return (\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              style={{ textTransform: \"uppercase\", margin: \"10px 5px\" }}\n              onClick={() => {\n                val.delDevice(props.index);\n              }}\n            >\n              x\n            </button>\n          );\n        }}\n      </Consumer>\n      <button className={\"btn btn-info\"}>{props.name}</button>\n      <Consumer>\n        {(val) => {\n          // debugger;\n          return (\n            <button\n              type=\"button\"\n              className={\"btn btn-warning\"}\n              style={{ textTransform: \"uppercase\", margin: \"10px 5px\" }}\n              onClick={() => {\n                val.setCondition(props.index);\n              }}\n            >\n              {hidden(val.devices[props.index].condition)}\n            </button>\n          );\n        }}\n      </Consumer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Consumer } from \"../ContextAPI\";\nimport { useState } from \"react\";\nimport Devise from \"./Devise\";\n\nexport default function Room(props) {\n  const [selectedDevise, setSelectedDevise] = useState(\"\");\n\n  return (\n    <div>\n      <div style={{ backgroundColor: props.color }}>\n        <h1>{props.type}</h1>\n        <h2>{props.name}</h2>\n\n        {props.devices.map((element, i) => {\n          if (element.room === props.name) {\n            return (\n              <Devise\n                room={props.name}\n                name={element.deviceName}\n                condition={element.condition}\n                index={i}\n              />\n            );\n          } else return null;\n        })}\n        <label className=\"form-label\" htmlFor=\"roomSelect\">\n          Select devise:\n        </label>\n        <br />\n        <select\n          onChange={(element) => {\n            setSelectedDevise(element.target.value);\n          }}\n          className=\"form-select-sm\"\n          id=\"roomSelect\"\n        >\n          <option id=\"1\">Choose devise</option>\n          <option id=\"2\">Conditioner</option>\n          <option id=\"3\">Lamp</option>\n          <option id=\"4\">Boiler</option>\n          <option id=\"5\">Stereo system</option>\n        </select>\n        <br />\n        <Link to=\"/\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            style={{ textTransform: \"uppercase\", margin: \"10px 5px\" }}\n          >\n            Back\n          </button>\n        </Link>\n        <button\n          type=\"button\"\n          className=\"btn btn-success\"\n          style={{ textTransform: \"uppercase\", margin: \"10px 5px\" }}\n          onClick={() => {\n            if (selectedDevise.length === 0) {\n              alert(\"Please choose devise.\");\n            } else {\n              props.addDeviceFunction(props.name, selectedDevise, false);\n            }\n          }}\n        >\n          add devise\n        </button>\n        <Link to=\"/\">\n          <Consumer>\n            {(val) => {\n              return (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-danger\"\n                  style={{ textTransform: \"uppercase\", margin: \"10px 5px\" }}\n                  onClick={() => {\n                    val.dell(props.id);\n                  }}\n                >\n                  delete room\n                </button>\n              );\n            }}\n          </Consumer>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Consumer } from \"../ContextAPI\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function AddRoom() {\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [color, setColor] = useState(\"white\");\n\n  return (\n    <div style={{ minHeight: \"745px\" }}>\n      <div\n        className=\"\"\n        style={{\n          border: \"solid 1px #14274e\",\n          borderRadius: \"10px\",\n          boxShadow: \"2px 2px 10px\",\n          backgroundColor: \"#9ba4b4\",\n          margin: \"auto 0px\",\n        }}\n      >\n        <label className=\"form-label\" htmlFor=\"roomSelect\">\n          Select room to add:\n        </label>\n        <br />\n        <select\n          className=\"form-select-sm\"\n          onChange={(element) => {\n            setType(element.target.value);\n          }}\n          id=\"roomSelect\"\n        >\n          <option>Choose room</option>\n          <option>Bathroom</option>\n          <option>Bedroom</option>\n          <option>Kitchen</option>\n          <option>Toilet</option>\n        </select>\n        <br />\n        <label htmlFor=\"nameInput\">Write a name for room:</label>\n        <br />\n        <input\n          className=\"form-control-sm\"\n          onChange={(element) => {\n            setName(element.target.value);\n          }}\n          id=\"nameInput\"\n          type=\"text\"\n        />\n        <br />\n        <label htmlFor=\"colorInput\">Choose color:</label>\n        <br />\n        <input\n          className=\"form-control-sm form-control-color\"\n          onChange={(element) => {\n            setColor(element.target.value);\n          }}\n          id=\"colorInput\"\n          type=\"color\"\n          name=\"colorInput\"\n        />\n        <br />\n        <Link to=\"/\">\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            style={{ textTransform: \"uppercase\", margin: \"10px 5px\" }}\n          >\n            Back\n          </button>\n        </Link>\n        <Consumer>\n          {(val) => {\n            return (\n              <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                style={{ textTransform: \"uppercase\", margin: \"10px 5px\" }}\n                onClick={() => {\n                  // debugger;\n                  // if (val.rooms.indexOf(name) > -1)\n                  if (type.length === 0 || type === \"Choose room\")\n                    alert(\"Please select room type!\");\n                  else if (name.length === 0) alert(\"Please enter room name!\");\n                  else if (name.length > 5)\n                    alert(\"Length of room name cant be more then 5 chars.\");\n                  else {\n                    val.add(name, type, color);\n                  }\n                }}\n              >\n                Add Room\n              </button>\n            );\n          }}\n        </Consumer>\n      </div>\n    </div>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from \"./Components/Header\";\nimport Main from \"./Components/Main\";\nimport Room from \"./Components/Room\";\nimport { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport AddRoom from \"./Components/AddRoom\";\nimport { Provider } from \"./ContextAPI\";\n\nfunction App() {\n  const [rooms, setRooms] = useState([]);\n  const [devices, setDevices] = useState([]);\n\n  // Add a object room to rooms.\n  // Name of room, Type of room and room color.\n\n  const ifSameRoomName = (name) => {\n    \n    return\n  };\n\n  const addRoom = (roomName, roomType, roomColor) => {\n    // debugger;\n    // let flag = ifSameRoomName(roomName);\n    if (\n      rooms.some((element) => {\n        return element.name === roomName;\n      })\n    )\n      alert(\"Try another name!\");\n    else {\n      setRooms([\n        {\n          name: roomName,\n          type: roomType,\n          color: roomColor,\n        },\n        ...rooms,\n      ]);\n    }\n  };\n\n  // Add device to the devices array.\n  // In witch room device is, device name, device condition and id.\n  const addDevice = (room, device, condition) => {\n    setDevices([\n      { room: room, deviceName: device, condition: condition },\n      ...devices,\n    ]);\n  };\n\n  // Delete device from devices.\n  const deleteDevice = (id) => {\n    // debugger;\n    let tempDevicesList = devices.filter((element, index) => index !== id);\n    setDevices(tempDevicesList);\n  };\n\n  const setDeviceCondition = (id) => {\n    let newDevices = [...devices];\n    for (let i = 0; i < newDevices.length; i++) {\n      if (i === id) newDevices[i].condition = !newDevices[i].condition;\n    }\n    setDevices(newDevices);\n  };\n\n  // Delete room from rooms.\n  const deleteRoom = (i) => {\n    let tempRoomsList = rooms.filter((element, index) => index !== i);\n    setRooms(tempRoomsList);\n  };\n\n  // Open rout for each room in the array rooms.\n  const routeList = () => {\n    if (rooms.length === 0) return null;\n    else\n      return (\n        <div>\n          {rooms.map((element, i) => {\n            return (\n              <Route\n                exact\n                path={`/${element.name}`}\n                component={() => {\n                  return (\n                    <Room\n                      id={i}\n                      name={element.name}\n                      type={element.type}\n                      color={element.color}\n                      devicesList={element.devices}\n                      addDeviceFunction={addDevice}\n                      devices={devices}\n                    />\n                  );\n                }}\n              />\n            );\n          })}\n        </div>\n      );\n  };\n\n  return (\n    <div\n      className=\"App container-sm\"\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        backgroundColor: \"#f4f4f2\",\n        textAlign: \"center\",\n        minHeight: \"812px\",\n        padding: \"10px\",\n      }}\n    >\n      {/* Header Component */}\n      <Header />\n\n      <Provider\n        value={{\n          add: addRoom,\n          dell: deleteRoom,\n          setCondition: setDeviceCondition,\n          rooms: rooms,\n          devices: devices,\n          delDevice: deleteDevice,\n        }}\n      >\n        <Router>\n          {/* Open here list of routs from rooms array. */}\n          <Switch>{routeList()}</Switch>\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={() => {\n                return <Main rooms={rooms} />;\n              }}\n            />\n            <Route\n              exact\n              path=\"/AddRoom\"\n              component={() => {\n                return <AddRoom />;\n              }}\n            />\n          </Switch>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}